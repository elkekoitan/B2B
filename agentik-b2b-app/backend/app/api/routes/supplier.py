from fastapi import APIRouter, Depends, HTTPException, status\nfrom typing import List, Optional\nfrom uuid import UUID\n\nfrom app.core.auth import get_current_user_profile, get_optional_user\nfrom app.core.database import get_db\nfrom app.models.supplier import Supplier, SupplierCreate, SupplierUpdate\nfrom app.models.common import APIResponse, PaginatedResponse, FilterParams\nfrom supabase import Client\nfrom loguru import logger\n\nrouter = APIRouter()\n\n@router.get(\"\", response_model=APIResponse[PaginatedResponse[Supplier]])\nasync def get_suppliers(\n    params: FilterParams = Depends(),\n    industry: Optional[str] = None,\n    verified: Optional[bool] = None,\n    min_rating: Optional[float] = None,\n    current_user = Depends(get_optional_user),\n    db: Client = Depends(get_db)\n):\n    \"\"\"Tedarikçi listesini getir\"\"\"\n    try:\n        # Query builder\n        query = db.table(\"suppliers\").select(\n            \"*\", \n            \"companies(*)\"\n        )\n        \n        # Filters\n        if industry:\n            query = query.eq(\"companies.industry\", industry)\n        if verified is not None:\n            query = query.eq(\"verified\", verified)\n        if min_rating:\n            query = query.gte(\"rating\", min_rating)\n        if params.search:\n            query = query.or_(f\"companies.name.ilike.%{params.search}%,specializations.cs.{{{params.search}}}\")\n        \n        # Pagination\n        offset = (params.page - 1) * params.size\n        query = query.range(offset, offset + params.size - 1)\n        \n        # Sorting\n        if params.sort_by:\n            ascending = params.sort_order == \"asc\"\n            query = query.order(params.sort_by, desc=not ascending)\n        else:\n            query = query.order(\"rating\", desc=True)\n        \n        # Execute query\n        result = query.execute()\n        \n        # Get total count\n        count_query = db.table(\"suppliers\").select(\"id\", count=\"exact\")\n        if industry:\n            count_query = count_query.eq(\"companies.industry\", industry)\n        if verified is not None:\n            count_query = count_query.eq(\"verified\", verified)\n        if min_rating:\n            count_query = count_query.gte(\"rating\", min_rating)\n        \n        count_result = count_query.execute()\n        total = count_result.count or 0\n        \n        has_next = (params.page * params.size) < total\n        has_previous = params.page > 1\n        \n        paginated_data = PaginatedResponse(\n            data=result.data or [],\n            total=total,\n            page=params.page,\n            size=params.size,\n            has_next=has_next,\n            has_previous=has_previous\n        )\n        \n        return APIResponse(\n            success=True,\n            data=paginated_data\n        )\n        \n    except Exception as e:\n        logger.error(f\"Supplier list error: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Tedarikçi listesi alınırken hata oluştu\"\n        )\n\n@router.get(\"/{supplier_id}\", response_model=APIResponse[Supplier])\nasync def get_supplier_by_id(\n    supplier_id: UUID,\n    current_user = Depends(get_optional_user),\n    db: Client = Depends(get_db)\n):\n    \"\"\"Tek tedarikçi detayını getir\"\"\"\n    try:\n        result = db.table(\"suppliers\").select(\n            \"*\", \"companies(*)\"\n        ).eq(\"id\", str(supplier_id)).single().execute()\n        \n        if not result.data:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Tedarikçi bulunamadı\"\n            )\n        \n        return APIResponse(\n            success=True,\n            data=result.data\n        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"Supplier detail error: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Tedarikçi detayları alınırken hata oluştu\"\n        )\n\n@router.post(\"\", response_model=APIResponse[Supplier])\nasync def create_supplier(\n    supplier_data: SupplierCreate,\n    current_user = Depends(get_current_user_profile),\n    db: Client = Depends(get_db)\n):\n    \"\"\"Yeni tedarikçi oluştur (kendi şirketini tedarikçi olarak kaydet)\"\"\"\n    try:\n        # Kullanıcının şirketi zaten tedarikçi mi kontrol et\n        existing_supplier = db.table(\"suppliers\").select(\"id\").eq(\n            \"company_id\", current_user[\"company_id\"]\n        ).execute()\n        \n        if existing_supplier.data:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Şirketiniz zaten tedarikçi olarak kayıtlı\"\n            )\n        \n        # Tedarikçi verilerini hazırla\n        create_data = supplier_data.dict()\n        create_data[\"company_id\"] = current_user[\"company_id\"]\n        \n        # Supabase'e kaydet\n        result = db.table(\"suppliers\").insert(create_data).execute()\n        \n        if not result.data:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Tedarikçi oluşturulamadı\"\n            )\n        \n        # Tedarikçi detaylarını getir\n        supplier_detail = db.table(\"suppliers\").select(\n            \"*\", \"companies(*)\"\n        ).eq(\"id\", result.data[0][\"id\"]).single().execute()\n        \n        return APIResponse(\n            success=True,\n            data=supplier_detail.data,\n            message=\"Tedarikçi kaydı başarıyla oluşturuldu\"\n        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"Supplier creation error: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Tedarikçi kaydı oluşturulurken hata oluştu\"\n        )\n\n@router.put(\"/{supplier_id}\", response_model=APIResponse[Supplier])\nasync def update_supplier(\n    supplier_id: UUID,\n    supplier_update: SupplierUpdate,\n    current_user = Depends(get_current_user_profile),\n    db: Client = Depends(get_db)\n):\n    \"\"\"Tedarikçi bilgilerini güncelle\"\"\"\n    try:\n        # Yetki kontrolü - sadece kendi şirketinin tedarikçi profilini güncelleyebilir\n        supplier_check = db.table(\"suppliers\").select(\"company_id\").eq(\n            \"id\", str(supplier_id)\n        ).single().execute()\n        \n        if not supplier_check.data:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Tedarikçi bulunamadı\"\n            )\n        \n        if supplier_check.data[\"company_id\"] != current_user[\"company_id\"]:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"Bu tedarikçi profilini güncelleme yetkiniz yok\"\n            )\n        \n        # Update data hazırla\n        update_data = {k: v for k, v in supplier_update.dict().items() if v is not None}\n        update_data[\"updated_at\"] = \"now()\"\n        \n        # Güncelle\n        result = db.table(\"suppliers\").update(update_data).eq(\n            \"id\", str(supplier_id)\n        ).execute()\n        \n        if not result.data:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Tedarikçi bilgileri güncellenemedi\"\n            )\n        \n        # Güncellenmiş tedarikçiyi getir\n        updated_supplier = db.table(\"suppliers\").select(\n            \"*\", \"companies(*)\"\n        ).eq(\"id\", str(supplier_id)).single().execute()\n        \n        return APIResponse(\n            success=True,\n            data=updated_supplier.data,\n            message=\"Tedarikçi bilgileri başarıyla güncellendi\"\n        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"Supplier update error: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Tedarikçi bilgileri güncellenirken hata oluştu\"\n        )\n\n@router.get(\"/company/{company_id}\", response_model=APIResponse[Supplier])\nasync def get_supplier_by_company(\n    company_id: UUID,\n    current_user = Depends(get_optional_user),\n    db: Client = Depends(get_db)\n):\n    \"\"\"Şirket ID'sine göre tedarikçi getir\"\"\"\n    try:\n        result = db.table(\"suppliers\").select(\n            \"*\", \"companies(*)\"\n        ).eq(\"company_id\", str(company_id)).single().execute()\n        \n        if not result.data:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Bu şirket için tedarikçi kaydı bulunamadı\"\n            )\n        \n        return APIResponse(\n            success=True,\n            data=result.data\n        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"Supplier by company error: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Tedarikçi bilgileri alınırken hata oluştu\"\n        )\n\n@router.get(\"/search/specializations\", response_model=APIResponse[List[str]])\nasync def get_specializations(\n    db: Client = Depends(get_db)\n):\n    \"\"\"Mevcut uzmanlık alanlarını getir\"\"\"\n    try:\n        result = db.rpc(\"get_all_specializations\").execute()\n        \n        specializations = result.data if result.data else []\n        \n        return APIResponse(\n            success=True,\n            data=specializations\n        )\n        \n    except Exception as e:\n        logger.error(f\"Specializations error: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Uzmanlık alanları alınırken hata oluştu\"\n        )\n