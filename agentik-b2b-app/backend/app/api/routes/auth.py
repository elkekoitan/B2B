from fastapi import APIRouter, Depends, HTTPException, status\nfrom typing import Optional\nfrom uuid import UUID\n\nfrom app.core.auth import get_current_user_profile, get_current_auth_user\nfrom app.core.database import get_db\nfrom app.models.user import User, UserCreate, UserUpdate\nfrom app.models.common import APIResponse\nfrom supabase import Client\nfrom loguru import logger\n\nrouter = APIRouter()\n\n@router.get(\"/me\", response_model=APIResponse[User])\nasync def get_current_user(\n    current_user = Depends(get_current_user_profile),\n    db: Client = Depends(get_db)\n):\n    \"\"\"Mevcut kullanıcı bilgilerini getir\"\"\"\n    try:\n        return APIResponse(\n            success=True,\n            data=current_user\n        )\n        \n    except Exception as e:\n        logger.error(f\"Get current user error: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Kullanıcı bilgileri alınırken hata oluştu\"\n        )\n\n@router.put(\"/me\", response_model=APIResponse[User])\nasync def update_current_user(\n    user_update: UserUpdate,\n    current_user = Depends(get_current_user_profile),\n    db: Client = Depends(get_db)\n):\n    \"\"\"Mevcut kullanıcı bilgilerini güncelle\"\"\"\n    try:\n        # Update data hazırla\n        update_data = {k: v for k, v in user_update.dict().items() if v is not None}\n        update_data[\"updated_at\"] = \"now()\"\n        \n        # Güncelle\n        result = db.table(\"users\").update(update_data).eq(\n            \"id\", current_user[\"id\"]\n        ).execute()\n        \n        if not result.data:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Kullanıcı bilgileri güncellenemedi\"\n            )\n        \n        # Güncellenmiş kullanıcıyı getir\n        updated_user = db.table(\"users\").select(\n            \"*\", \"companies(*)\"\n        ).eq(\"id\", current_user[\"id\"]).single().execute()\n        \n        return APIResponse(\n            success=True,\n            data=updated_user.data,\n            message=\"Kullanıcı bilgileri başarıyla güncellendi\"\n        )\n        \n    except HTTPException:\n        raise\n    except Exception as e:\n        logger.error(f\"User update error: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Kullanıcı bilgileri güncellenirken hata oluştu\"\n        )\n\n@router.get(\"/profile/completion\", response_model=APIResponse[dict])\nasync def get_profile_completion(\n    current_user = Depends(get_current_user_profile),\n    db: Client = Depends(get_db)\n):\n    \"\"\"Profil tamamlanma oranını getir\"\"\"\n    try:\n        user_data = current_user\n        company_data = user_data.get(\"companies\", {})\n        \n        # Kullanıcı profil alanları kontrolü\n        user_fields = [\n            user_data.get(\"full_name\"),\n            user_data.get(\"phone\"),\n            user_data.get(\"email\")\n        ]\n        \n        # Şirket profil alanları kontrolü\n        company_fields = [\n            company_data.get(\"name\"),\n            company_data.get(\"email\"),\n            company_data.get(\"phone\"),\n            company_data.get(\"address\"),\n            company_data.get(\"industry\"),\n            company_data.get(\"contact_person\")\n        ]\n        \n        # Tamamlanan alan sayısı\n        completed_user_fields = sum(1 for field in user_fields if field)\n        completed_company_fields = sum(1 for field in company_fields if field)\n        \n        total_user_fields = len(user_fields)\n        total_company_fields = len(company_fields)\n        \n        user_completion = (completed_user_fields / total_user_fields) * 100 if total_user_fields > 0 else 0\n        company_completion = (completed_company_fields / total_company_fields) * 100 if total_company_fields > 0 else 0\n        \n        overall_completion = (user_completion + company_completion) / 2\n        \n        # Eksik alanları belirle\n        missing_fields = []\n        if not user_data.get(\"full_name\"):\n            missing_fields.append(\"full_name\")\n        if not user_data.get(\"phone\"):\n            missing_fields.append(\"phone\")\n        if not company_data.get(\"address\"):\n            missing_fields.append(\"company_address\")\n        if not company_data.get(\"industry\"):\n            missing_fields.append(\"company_industry\")\n        if not company_data.get(\"contact_person\"):\n            missing_fields.append(\"company_contact_person\")\n        \n        completion_data = {\n            \"overall_completion\": round(overall_completion, 2),\n            \"user_completion\": round(user_completion, 2),\n            \"company_completion\": round(company_completion, 2),\n            \"missing_fields\": missing_fields,\n            \"is_complete\": overall_completion >= 90\n        }\n        \n        return APIResponse(\n            success=True,\n            data=completion_data\n        )\n        \n    except Exception as e:\n        logger.error(f\"Profile completion error: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Profil tamamlanma oranı alınırken hata oluştu\"\n        )\n\n@router.get(\"/dashboard/stats\", response_model=APIResponse[dict])\nasync def get_dashboard_stats(\n    current_user = Depends(get_current_user_profile),\n    db: Client = Depends(get_db)\n):\n    \"\"\"Dashboard istatistiklerini getir\"\"\"\n    try:\n        company_id = current_user[\"company_id\"]\n        \n        # Kullanıcının şirketinin tedarikçi olup olmadığını kontrol et\n        supplier_check = db.table(\"suppliers\").select(\"id\").eq(\n            \"company_id\", company_id\n        ).execute()\n        \n        is_supplier = bool(supplier_check.data)\n        \n        stats = {\n            \"is_supplier\": is_supplier\n        }\n        \n        if is_supplier:\n            # Tedarikçi için istatistikler\n            # Toplam teklif sayısı\n            offers_count = db.table(\"offers\").select(\n                \"id\", count=\"exact\"\n            ).eq(\"suppliers.company_id\", company_id).execute()\n            \n            # Kabul edilen teklifler\n            accepted_offers = db.table(\"offers\").select(\n                \"id\", count=\"exact\"\n            ).eq(\"suppliers.company_id\", company_id).eq(\n                \"status\", \"accepted\"\n            ).execute()\n            \n            # Bekleyen teklifler\n            pending_offers = db.table(\"offers\").select(\n                \"id\", count=\"exact\"\n            ).eq(\"suppliers.company_id\", company_id).eq(\n                \"status\", \"submitted\"\n            ).execute()\n            \n            stats.update({\n                \"total_offers\": offers_count.count or 0,\n                \"accepted_offers\": accepted_offers.count or 0,\n                \"pending_offers\": pending_offers.count or 0,\n                \"success_rate\": round(\n                    (accepted_offers.count or 0) / max(offers_count.count or 0, 1) * 100, 2\n                )\n            })\n        else:\n            # Alıcı için istatistikler\n            # Toplam RFQ sayısı\n            rfqs_count = db.table(\"rfqs\").select(\n                \"id\", count=\"exact\"\n            ).eq(\"company_id\", company_id).execute()\n            \n            # Aktif RFQ'lar\n            active_rfqs = db.table(\"rfqs\").select(\n                \"id\", count=\"exact\"\n            ).eq(\"company_id\", company_id).in_(\n                \"status\", [\"published\", \"in_review\"]\n            ).execute()\n            \n            # Tamamlanan RFQ'lar\n            completed_rfqs = db.table(\"rfqs\").select(\n                \"id\", count=\"exact\"\n            ).eq(\"company_id\", company_id).eq(\n                \"status\", \"awarded\"\n            ).execute()\n            \n            # Toplam alınan teklifler\n            received_offers = db.table(\"offers\").select(\n                \"id\", count=\"exact\"\n            ).eq(\"rfqs.company_id\", company_id).execute()\n            \n            stats.update({\n                \"total_rfqs\": rfqs_count.count or 0,\n                \"active_rfqs\": active_rfqs.count or 0,\n                \"completed_rfqs\": completed_rfqs.count or 0,\n                \"received_offers\": received_offers.count or 0\n            })\n        \n        return APIResponse(\n            success=True,\n            data=stats\n        )\n        \n    except Exception as e:\n        logger.error(f\"Dashboard stats error: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Dashboard istatistikleri alınırken hata oluştu\"\n        )\n\n@router.post(\"/logout\", response_model=APIResponse[dict])\nasync def logout(\n    auth_user = Depends(get_current_auth_user),\n    db: Client = Depends(get_db)\n):\n    \"\"\"Kullanıcıyı çıkış yap\"\"\"\n    try:\n        # Supabase auth logout\n        db.auth.sign_out()\n        \n        return APIResponse(\n            success=True,\n            data={\"message\": \"Successfully logged out\"},\n            message=\"Başarıyla çıkış yapıldı\"\n        )\n        \n    except Exception as e:\n        logger.error(f\"Logout error: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"Çıkış yapılırken hata oluştu\"\n        )\n