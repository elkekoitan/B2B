from fastapi import Request, HTTPException, status\nfrom fastapi.responses import JSONResponse\nfrom fastapi.exceptions import RequestValidationError\nfrom starlette.exceptions import HTTPException as StarletteHTTPException\nfrom loguru import logger\nimport traceback\n\nasync def http_exception_handler(request: Request, exc: HTTPException):\n    \"\"\"HTTP exception handler\"\"\"\n    logger.error(\n        f\"HTTP Exception: {exc.status_code} - {exc.detail} - \"\n        f\"Path: {request.url.path} - \"\n        f\"Method: {request.method}\"\n    )\n    \n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"success\": False,\n            \"error\": exc.detail,\n            \"code\": exc.status_code\n        }\n    )\n\nasync def validation_exception_handler(request: Request, exc: RequestValidationError):\n    \"\"\"Validation exception handler\"\"\"\n    logger.error(\n        f\"Validation Error: {exc.errors()} - \"\n        f\"Path: {request.url.path} - \"\n        f\"Method: {request.method}\"\n    )\n    \n    # Format validation errors\n    errors = []\n    for error in exc.errors():\n        field = \" -> \".join(str(x) for x in error[\"loc\"])\n        errors.append({\n            \"field\": field,\n            \"message\": error[\"msg\"],\n            \"type\": error[\"type\"]\n        })\n    \n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        content={\n            \"success\": False,\n            \"error\": \"Validation error\",\n            \"detail\": \"Gönderilen veriler geçersiz\",\n            \"errors\": errors\n        }\n    )\n\nasync def general_exception_handler(request: Request, exc: Exception):\n    \"\"\"General exception handler\"\"\"\n    logger.error(\n        f\"Unhandled Exception: {type(exc).__name__}: {str(exc)} - \"\n        f\"Path: {request.url.path} - \"\n        f\"Method: {request.method} - \"\n        f\"Traceback: {traceback.format_exc()}\"\n    )\n    \n    return JSONResponse(\n        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        content={\n            \"success\": False,\n            \"error\": \"Internal server error\",\n            \"detail\": \"Beklenmeyen bir hata oluştu. Lütfen daha sonra tekrar deneyin.\",\n            \"code\": \"INTERNAL_ERROR\"\n        }\n    )\n\nasync def starlette_exception_handler(request: Request, exc: StarletteHTTPException):\n    \"\"\"Starlette HTTP exception handler\"\"\"\n    if exc.status_code == status.HTTP_404_NOT_FOUND:\n        logger.warning(f\"404 Not Found: {request.url.path}\")\n        return JSONResponse(\n            status_code=status.HTTP_404_NOT_FOUND,\n            content={\n                \"success\": False,\n                \"error\": \"Not found\",\n                \"detail\": \"İstenen kaynak bulunamadı\",\n                \"code\": \"NOT_FOUND\"\n            }\n        )\n    \n    logger.error(\n        f\"Starlette HTTP Exception: {exc.status_code} - {exc.detail} - \"\n        f\"Path: {request.url.path}\"\n    )\n    \n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\n            \"success\": False,\n            \"error\": exc.detail,\n            \"code\": exc.status_code\n        }\n    )\n\n# Custom exceptions\nclass BusinessLogicError(Exception):\n    \"\"\"Business logic error\"\"\"\n    def __init__(self, message: str, code: str = \"BUSINESS_ERROR\"):\n        self.message = message\n        self.code = code\n        super().__init__(self.message)\n\nclass DatabaseError(Exception):\n    \"\"\"Database operation error\"\"\"\n    def __init__(self, message: str, code: str = \"DATABASE_ERROR\"):\n        self.message = message\n        self.code = code\n        super().__init__(self.message)\n\nclass AuthenticationError(Exception):\n    \"\"\"Authentication error\"\"\"\n    def __init__(self, message: str, code: str = \"AUTH_ERROR\"):\n        self.message = message\n        self.code = code\n        super().__init__(self.message)\n\nclass AuthorizationError(Exception):\n    \"\"\"Authorization error\"\"\"\n    def __init__(self, message: str, code: str = \"AUTHORIZATION_ERROR\"):\n        self.message = message\n        self.code = code\n        super().__init__(self.message)\n\n# Custom exception handlers\nasync def business_logic_exception_handler(request: Request, exc: BusinessLogicError):\n    \"\"\"Business logic exception handler\"\"\"\n    logger.warning(\n        f\"Business Logic Error: {exc.message} - \"\n        f\"Path: {request.url.path} - \"\n        f\"Code: {exc.code}\"\n    )\n    \n    return JSONResponse(\n        status_code=status.HTTP_400_BAD_REQUEST,\n        content={\n            \"success\": False,\n            \"error\": exc.message,\n            \"code\": exc.code\n        }\n    )\n\nasync def database_exception_handler(request: Request, exc: DatabaseError):\n    \"\"\"Database exception handler\"\"\"\n    logger.error(\n        f\"Database Error: {exc.message} - \"\n        f\"Path: {request.url.path} - \"\n        f\"Code: {exc.code}\"\n    )\n    \n    return JSONResponse(\n        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n        content={\n            \"success\": False,\n            \"error\": \"Database operation failed\",\n            \"detail\": \"Veritabanı işlemi başarısız oldu\",\n            \"code\": exc.code\n        }\n    )\n\nasync def authentication_exception_handler(request: Request, exc: AuthenticationError):\n    \"\"\"Authentication exception handler\"\"\"\n    logger.warning(\n        f\"Authentication Error: {exc.message} - \"\n        f\"Path: {request.url.path} - \"\n        f\"Code: {exc.code}\"\n    )\n    \n    return JSONResponse(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        content={\n            \"success\": False,\n            \"error\": \"Authentication failed\",\n            \"detail\": \"Kimlik doğrulama başarısız oldu\",\n            \"code\": exc.code\n        }\n    )\n\nasync def authorization_exception_handler(request: Request, exc: AuthorizationError):\n    \"\"\"Authorization exception handler\"\"\"\n    logger.warning(\n        f\"Authorization Error: {exc.message} - \"\n        f\"Path: {request.url.path} - \"\n        f\"Code: {exc.code}\"\n    )\n    \n    return JSONResponse(\n        status_code=status.HTTP_403_FORBIDDEN,\n        content={\n            \"success\": False,\n            \"error\": \"Access denied\",\n            \"detail\": \"Bu işlemi gerçekleştirme yetkiniz yok\",\n            \"code\": exc.code\n        }\n    )\n